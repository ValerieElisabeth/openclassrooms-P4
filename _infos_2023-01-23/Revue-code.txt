-------------------------------------------------------------------
DÉFINITION D'UNE MODALE :
-------------------------------------------------------------------

Une modale est une fenêtre qui s'affiche au centre de l'écran et qui obscurcit le reste de la page Web, (par overlay) la rendant temporairement inaccessible. Elle est souvent utilisée pour afficher des informations importantes ou pour demander une action de l'utilisateur.

Contrairement aux pop-ups, les modales sont moins intrusives et elles obligent l'utilisateur à interagir avec la fenêtre avant de revenir à la page Web. Les modales peuvent également fournir une expérience utilisateur plus fluide, car elles peuvent être utilisées pour afficher des formulaires de saisie d'informations, des menus de navigation ou pour confirmer des actions.

-------------------------------------------------------------------
-------------------------------------------------------------------
MES ACTIONS DANS LE HTML :
-------------------------------------------------------------------
-------------------------------------------------------------------
1/ J'ai créer une classe form, pour cibler tous le formulaire, depuis mon fichier JS. 
-------------------------------------------------------------------
-------------------------------------------------------------------
2/ J'ai placé sur cette classe un écouteur d'évènement sur le bouton de type "submit" pour gérér la validité final de tous les boutons du formulaire.
-------------------------------------------------------------------
-------------------------------------------------------------------
3/ Dans le fichiers JavaScript, la constante "modalBtn" ciblait 2 boutons : "je m'inscris"
const modalBtn = document.querySelectorAll('.modal-btn');
Un pour la version Desktop, l'autre pour la version mobile.
IL NE FAUT PAS EN SUPPRIMER UN.
-------------------------------------------------------------------
-------------------------------------------------------------------

4/ Une constante : formData ciblait les 7 classes communes à chaque input du formulaire.
ces classes ont un lien avec les messages d'érreurs pré-stylés visibles dans le fichier CSS.


----------code CSS des messages d'erreurs-------------//
.formData[data-error]::after {
  content: attr(data-error);
  font-size: 12px;
  color: #e54858;
  display: block;
  margin-top: 7px;
  margin-bottom: 7px;
  text-align: right;
  letter-spacing: 1px;
  line-height: 0.7;
  opacity: 0;
  transition: 0.3s;
}

.formData[data-error-visible='true']::after {
  opacity: 1;
}
.formData[data-error-visible='true'] .text-control {
  border: 2px solid #e54858;
}
------------------------------------------------------//

Pour cibler ces messages, je suis passé par la méthode : setAttribute(). Puis, pour cibler l'attribut ==> attr(data-error); celui qui est utilisé par le CSS, pour afficher ces messages, juste après leur container respectif, eux-mêmes ciblés, gâces aux ID de chaque éléments.

Ce ciblage m'a été utile pour EFFACER tous les inputs du formulaire à l'exception du bouton de soumission, pour laisser apparaitre un message de confirmation de l'envoi du formulaire.

// const formData = document.querySelector('.formData');

-------------------------------------------------------------------
-------------------------------------------------------------------

5/ Au niveau des Inputs Radio, j'ai déplacé un label à l'intérieur de sa classe formData, car au moment où j'ai voulu cibler les classes formData, pour faire disparaitre tous les inputs du formulaire, seul le label de cet Input, ne disparaissait pas. Parcequ'il était mal placé dans le HTML.


<div class="formData">
<p class="text-label">
A quel tournoi souhaitez-vous participer cette année ?
</p>
<input
class="checkbox-input"
type="radio"
id="location1"
name="location"
value="New York"
/>

-------------------------------------------------------------------
-------------------------------------------------------------------

6/ J'ai rendu certains type de boutons inactifs avec la propriété : "novalidate",
pour prioriser les validation et les messages d'erreurs du fichier Javascript,
à la place de ceux des navigateurs pour que l'expérience utilisateur soit la même,
sur tous type de navigateurs.

-------------------------------------------------------------------
-------------------------------------------------------------------

                            ISSUES

-------------------------------------------------------------------
-------------------------------------------------------------------

IMPLÉMENTER LES ENTRÉES DU FORMULAIRE#2 
- - - - - - - - - - - - - - - - - - - -
(1) Lier les labels aux entrées dans le HTML en utilisant les attributs "for" et "id" dans le code existant. Corriger le code HTML quand nécessaire. ///////////////// => OK

Lier les <label> à leur <input> spécifique en utilisant les attributs "for" sur les labels et "id" sur les inputs. 

Cela permet de cliquer sur le label (ou étiquette, intitulé de l'input) pour directement sélectionner la zone d'écriture dans l'input associée. Cela permet d'améliorer l'accessibilité et l'expérience utilisateur.

-------------------------------------------------------------------
-------------------------------------------------------------------

(2) Utiliser du JavaScript pur (pas de jQuery) pour terminer le formulaire :

    Le formulaire doit être valide quand l'utilisateur clique sur "Submit"
    Les données doivent être saisies correctement :
    (1) Le champ Prénom a un minimum de 2 caractères / n'est pas vide. ///////////////// => OK
    (2) Le champ du nom de famille a un minimum de 2 caractères / n'est pas vide. ///////////////// => OK
    (3) L'adresse électronique est valide. ///////////////// => OK
    (4) Pour le nombre de concours, une valeur numérique est saisie. ///////////////// => OK
    (5) Un bouton radio est sélectionné. ///////////////// => OK
    (6) La case des conditions générales est cochée, l'autre case est facultative / peut être laissée décochée.
    Conserver les données du formulaire (ne pas effacer le formulaire) lorsqu'il ne passe pas la validation.

-------------------------------------------------------------------
-------------------------------------------------------------------

AJOUTER VALIDATION OU MESSAGES D'ERREUR #3
- - - - - - - - - - - - - - - - - - - - - - 
(3) Des messages d'erreur spécifiques doivent apparaître sous l'entrée qui n'est pas correcte.
Les messages d'erreur doivent s'afficher sous le champ de saisie associé.

    Exemples :
    "Veuillez entrer 2 caractères ou plus pour le champ du nom." ///////////////// => OK
    "Vous devez choisir une option."  ///////////////// => OK
    "Vous devez vérifier que vous acceptez les termes et conditions."  ///////////////// => OK
    "Vous devez entrer votre date de naissance."  ///////////////// => OK

-------------------------------------------------------------------
-------------------------------------------------------------------

(4) Après une validation réussie, inclure un message de confirmation de la soumission réussie pour l'utilisateur (ex. "Merci ! Votre réservation a été reçue.")  ///////////////// => OK

-------------------------------------------------------------------
-------------------------------------------------------------------




